//DEPRECATED!!!
    //chooses selected plant from dropdown menu and sets selectedPlant to obj on dropdown
    // const [selectedPlant, setSelectedPlant] = useState('')
    // const handleOptionChange = (e) => {
    //     const selectedValue = e.target.value
    //     const selectedObj = allPlants.find(item => item.name === selectedValue)
    //     setSelectedPlant(selectedObj)
    // }
    //DEPRECATED!!!

        // //calculates the columns and rows for the plantbed
    // let columnCount = Math.floor(plantbedDim.width / maxWidth)
    // let columnWidth = 100 / columnCount
    // let rowCount = Math.floor(plantbedDim.height / maxHeight)
    // let rowWidth = 100 / rowCount
    // const plantBedColumns = {
    //     gridTemplateColumns: `repeat(${columnCount}, ${columnWidth}%)`,
    //     gridTemplateRows:`repeat(${rowCount}, ${rowWidth}%)`,
    // }

    // //sorts the planerCount by type of plant (can sort by other attributes if you change name, ie temp range)
    // const sortedPlants = planterCount.slice().sort((a, b) => a.name.localeCompare(b.name))
    // const alignedPlants = sortedPlants.reduce((plants, obj) => {
    //     plants.push(obj)
    //     return plants
    // }, [])

    // //place into greenhouse
    // const tempSort = planterCount.slice().sort((a, b) => {
    //     return a.temperature_range - b.temperature_range
    // })

    // //place into zone
    // const sunlightSort = tempSort.slice().sort((a, b) => {
    //     return a.sunlight_range - b.sunlight_range
    // })
    
    // //place into indiv section
    // const moistureSort = sunlightSort.slice().sort((a, b) => {
    //     return a.moisture_range - b.moisture_range
    // })




    // //divides plant bed into 4 quadrants
    // const quadrantStyle = {
    //     width:`${plantbedDim.width / 2}px`,
    //     height:`${plantbedDim.height / 2}px`,
    // }

        // //finds largest plant diameter and sets it as maxObj
    // let maxWidth = 0
    // let maxHeight = 0
    // let maxObject = null
    // for (const obj of alignedPlants) {
    //     if (obj.width > maxWidth) {
    //         maxWidth = obj.width
    //         maxHeight = obj.height
    //         maxObject = obj
    //     }

    // }

                        
                    {/* <div className='section' id='1' style={{backgroundColor:'blue', ...sectionStyle}}></div>
                    <div className='section' id='2' style={{backgroundColor:'red', ...sectionStyle}}></div>
                    <div className='section' id='3' style={{backgroundColor:'yellow', ...sectionStyle}}></div> */}
                    {/* <div className="quadrant" id='1' style={{backgroundColor:'blue', ...quadrantStyle}}>1</div>
                    <div className="quadrant" id='2' style={{backgroundColor:'red', ...quadrantStyle}}>2</div>
                    <div className="quadrant" id='3' style={{backgroundColor:'green', ...quadrantStyle}}>3</div>
                    <div className="quadrant" id='4' style={{backgroundColor:'yellow', ...quadrantStyle}}>4</div> */}

<div>
                {/* <select value={selectedPlant.name} onChange={handleOptionChange}>
                    <option value=''>Select...</option>
                    {allPlants.map(item => (
                        <option key={item.id} value={item.name}>
                            {item.name}
                        </option>
                    ))}
                </select> */}
                {/* <button onClick={addPlant}>Add</button> */}
            </div>


                //adds plants to planterCount
    // const addPlant = () => {
    //     if (planterCount.length > maxPlants) {
    //         // Show an error message if there's no more space
    //         console.log("No more space to plant!");
    //         return;
    //     }
        
    //     // const numPlantsToAdd = Math.min(quantity, availableSpace);
    //     // const newPlants = Array.from({ length: numPlantsToAdd }, () => selectedPlant);

    //     // setUnsortedPlants(prevPlants => [...prevPlants, ...newPlants]);
    //     // setQuantity('');
    //     // }

    //     const plant = {
    //         name: selectedPlant.name,
    //         width: selectedPlant.diameter * inch,
    //         height: selectedPlant.diameter * inch,
    //         color: selectedPlant.color,
    //         temperature_range: selectedPlant.temperature_range,
    //         moisture_range: selectedPlant.moisture_range,
    //         sunlight_range: selectedPlant.sunlight_range,
    //         growth_time: selectedPlant.growth_time
    //     }
    //     setPlanterCount([...planterCount, plant]);
    // }


    //determines plant container size and renders plants on screen
    //with the amount of small plants it can fit (ie - 4 carrots)
    const renderPlants = unsortedPlants.map((plant, index) => {
        const plantSize = plant.diameter * inch;
        if (plantSize > foot) {
            return (
                <div className="large_plant" key={index}>
                    <div
                        style={{
                            backgroundColor: plant.color,
                            width: plantSize + 'px',
                            height: plantSize + 'px',
                        }}
                        className="plant"
                    ></div>
                </div>
            );
        } else {
            const amount = Math.floor(foot / plantSize);
            const setOfDivs = [];
            for (let i = 0; i < amount; i++) {
                setOfDivs.push(
                    <div
                        key={index + i}
                        style={{
                            backgroundColor: plant.color,
                            width: plantSize + 'px',
                            height: plantSize + 'px',
                        }}
                        className="plant"
                    ></div>
                );
            }
            return (
                <div className="small_plant" key={index}>
                    {setOfDivs}
                </div>
            );
        }
    });

    
  //determines plant container size and renders plants on screen
    // const renderPlants = unsortedPlants.map((plant, index) => {
    //     const plantSize = plant.diameter * inch;
    //     if (plantSize > foot) {
    //         return (
    //             <div className="large_plant" key={index}>
    //                 <div
    //                     style={{
    //                         backgroundColor: plant.color,
    //                         width: plantSize + 'px',
    //                         height: plantSize + 'px',
    //                     }}
    //                     className="plant"
    //                 ></div>
    //             </div>
    //         );
    //     }
    //     if (foot / plantSize >= 2) {
    //         const amount = Math.floor(foot / plantSize);
    //         return (
    //             <div className="micro_plant" key={index}>
    //                 <div
    //                     style={{
    //                         backgroundColor: plant.color,
    //                         width: plantSize + 'px',
    //                         height: plantSize + 'px',
    //                     }}
    //                     className="plant"
    //                 ></div>
    //             </div>
    //         )
    //     } else {
    //         return (
    //             <div className="small_plant" key={index}>
    //                 <div
    //                     style={{
    //                         backgroundColor: plant.color,
    //                         width: plantSize + 'px',
    //                         height: plantSize + 'px',
    //                     }}
    //                     className="plant"
    //                 ></div>
    //             </div>
    //         )
    //     }
    // });